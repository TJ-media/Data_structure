# -*- coding: utf-8 -*-
"""6_BST와AVL트리구현.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M08sqSu-7T1LmdRzRI6sap6xlESKQDQ7
"""

class Node:
	def __init__(self, key):
		self.key = key
		self.parent = self.left = self.right = None
		self.height = 0

	def __str__(self):
		return str(self.key)

class BST:
	def __init__(self):
		self.root = None
		self.size = 0
	def __len__(self):
		return self.size

	def preorder(self, v):
		if v != None:
			print(v.key, end=" ")
			self.preorder(v.left)
			self.preorder(v.right)

	def inorder(self, v):
		if v != None:
			self.inorder(v.left)
			print(v.key,end=" ")
			self.inorder(v.right)

	def postorder(self, v):
		if v != None:
			self.postorder(v.left)
			self.postorder(v.right)
			print(v.key,end=" ")

	def height_update(self, x):
		while True:
			if not x: return
			l_h = self.height(x.left)
			r_h = self.height(x.right)
			x_h = max(l_h, r_h) + 1
			if self.height(x) == x_h:
				break
			x.height = x_h
			x = x.parent

	def find_loc(self, key):
		if self.size == 0: return None
		p = None
		v = self.root
		while v:
			if v.key == key: return v
			else:
				if v.key < key:
					p = v
					v = v.right
				else:
					p = v
					v = v.left
		return p

	def search(self, key):
		p = self.find_loc(key)
		if p and p.key == key:
			return p
		else:
			return None


	def insert(self, key):
		v = Node(key)
		if self.size == 0:
			self.root = v
		else:
			p = self.find_loc(key)
			if p and p.key != key:
				v.parent = p
				if p.key < key :
					p.right = v
				else:
					p.left = v
				self.height_update(p)
		self.size += 1
		return v


	def deleteByMerging(self, x):
		if not x: return
		a, b, pt = x.left, x.right, x.parent

		if a == None:
			c = b
			s = pt
		else:
			c = m = a
			while m.right:
				m = m.right
			m.right = b
			if b: b.parent = m
			s = m

		if self.root == x:
			if c: c.parent = None
			self.root = c
		else:
			if pt.left == x:
				pt.left = c
			else:
				pt.right = c
			if c: c.parent = pt
			self.height_update(pt)
		self.size -= 1
		self.height_update(s)
		return s

	def deleteByCopying(self, x):
		if not x: return
		pt, L, R = x.parent, x.left, x.right
		if L:
			y = x.left
			while y.right:
				y = y.right
			x.key = y.key

			if y.left:
				y.left.parent = y.parent

			if y.parent.left is y:
				y.parent.left = y.left
			else:
				y.parent.right= y.left
			pt = y.parent
			del y

		elif not L and R:
			y = R
			while y.left:
				y = y.left
			x.key = y.key
			if y.right:
				y.right.parent = y.parent
			if y.parent.left is y:
				y.parent.left = y.right
			else:
				y.parent.right = y.right
			pt = y.parent
			del y

		else:
			if pt == None:
				self.root = None
			else:
				if pt.left is x:
					pt.left = None
				else:
					pt.right = None
			del x
		self.size -= 1
		self.height_update(pt)
		return pt

	def height(self, x):
		if x == None: return -1
		else: return x.height

	def succ(self, x):
		if not x: return None
		if x.right:
			v = x.right
			while v.left:
				v = v.left
			return v
		else:
				while x.parent:
					if x.key < x.parent.key:
						return x.parent
					x = x.parent
				return None

	def pred(self, x):
		if not x: return None

		if x.left:
			v = x.left
			while v.right:
				v = v.right
			return v
		else:
			while x.parent:
				if x.key > x.parent.key:
					return x.parent
				x = x.parent
			return None

	def rotateRight(self, z):
		if not z: return
		x = z.left
		if x == None: return
		b = x.right
		x.parent = z.parent
		if z.parent:
			if z.parent.left == z:
				z.parent.left = x
			else:
				z.parent.right = x
		x.right = z
		z.parent = x
		z.left = b
		if b: b.parent = z
		if z == self.root: self.root = x
		else: self.height_update(x.parent)
		self.height_update(x)
		self.height_update(z)


	def rotateLeft(self, z):
		if not z: return
		x = z.right
		if x == None: return
		b = x.left
		x.parent = z.parent
		if z.parent:
			if z.parent.right == z:
				z.parent.right = x
			else:
				z.parent.left = x
		x.left = z
		z.parent = x
		z.right = b
		if b: b.parent = z
		if z == self.root: self.root = x
		else: self.height_update(x.parent)
		self.height_update(x)
		self.height_update(z)


T = BST()
while True:
	cmd = input().split()
	if cmd[0] == 'insert':
		v = T.insert(int(cmd[1]))
		print("+ {0} is inserted".format(v.key))
	elif cmd[0] == 'deleteC':
		v = T.search(int(cmd[1]))
		T.deleteByCopying(v)
		print("- {0} is deleted by copying".format(int(cmd[1])))
	elif cmd[0] == 'deleteM':
		v = T.search(int(cmd[1]))
		T.deleteByMerging(v)
		print("- {0} is deleted by merging".format(int(cmd[1])))
	elif cmd[0] == 'search':
		v = T.search(int(cmd[1]))
		if v == None:
			print("* {0} is not found!".format(cmd[1]))
		else:
			print("* {0} is found!".format(cmd[1]))
	elif cmd[0] == 'height':
		h = T.height(T.search(int(cmd[1])))
		if h == -1:
			print("= {0} is not found!".format(cmd[1]))
		else:
			print("= {0} has height of {1}".format(cmd[1], h))
	elif cmd[0] == 'succ':
		v = T.succ(T.search(int(cmd[1])))
		if v == None:
			print("> {0} is not found or has no successor".format(cmd[1]))
		else:
			print("> {0}'s successor is {1}".format(cmd[1], v.key))
	elif cmd[0] == 'pred':
		v = T.pred(T.search(int(cmd[1])))
		if v == None:
			print("< {0} is not found or has no predecssor".format(cmd[1]))
		else:
			print("< {0}'s predecssor is {1}".format(cmd[1], v.key))
	elif cmd[0] == 'Rleft':
		v = T.search(int(cmd[1]))
		if v == None:
			print("@ {0} is not found!".format(cmd[1]))
		else:
			T.rotateLeft(v)
			print("@ Rotated left at node {0}".format(cmd[1]))
	elif cmd[0] == 'Rright':
		v = T.search(int(cmd[1]))
		if v == None:
			print("@ {0} is not found!".format(cmd[1]))
		else:
			T.rotateRight(v)
			print("@ Rotated right at node {0}".format(cmd[1]))
	elif cmd[0] == 'preorder':
		T.preorder(T.root)
		print()
	elif cmd[0] == 'postorder':
		T.postorder(T.root)
		print()
	elif cmd[0] == 'inorder':
		T.inorder(T.root)
		print()
	elif cmd[0] == 'exit':
		break
	else:
		print("* not allowed command. enter a proper command!")