# -*- coding: utf-8 -*-
"""2_스택으로계산기구현.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13-9nbLm7-DC1LcV_Sod2NrtUGCQg0u1x
"""

class Stack:
	def __init__(self):
		self.items = []

	def push(self, val):
		self.items.append(val)

	def pop(self):
		try:
			return self.items.pop()
		except IndexError:
			print("Stack is empty")

	def top(self):
		try:
			return self.items[-1]
		except IndexError:
			print("Stack is empty")

	def __len__(self):
		return len(self.items)

	def isEmpty(self):
		return len(self) == 0


def get_token_list(expr):

	token_list = []
	i = 0

	while i < len(expr):

		if expr[i] not in ["+", "-", "*", "/", "^", "(", ")", " "]:
			j = 0

			while i + j < len(expr):
				if expr[i + j] not in ["+", "-", "*", "/", "^", " ", "(", ")"]:
					j += 1
				else:
					break
			token_list.append("".join(expr[i : i + j]))
			i += j

		elif expr[i] in ["+", "-", "*", "/", "^", "(", ")"]:
			token_list.append(expr[i])
			i += 1

		else: #whitespace일 때
			i += 1

	return token_list

def infix_to_postfix(token_list):

	priority = {"+" : 1, "-" : 1,
							"*" : 2, "/" : 2,
							"^" : 3,
							"(" : 0,
							")" : 5 }
	opstack = Stack()
	postfix = []

	for i in range(len(token_list)):
		if token_list[i] not in ["+", "-", "*", "/", "^", "(", ")"]:
			postfix.append(token_list[i])

		elif token_list[i] == "(":
			opstack.push(token_list[i])

		elif token_list[i] == ")":
			while opstack.top() != "(":
				postfix.append(opstack.pop())
			opstack.pop()

		else:  # token_list[i] in ["+", "-", "*", "/", "^"]:
			if len(opstack) == 0:
				opstack.push(token_list[i])
			else:
				while len(opstack) != 0 and priority[opstack.top()] >= priority[token_list[i]]:
					postfix.append(opstack.pop())
				opstack.push(token_list[i])
	while len(opstack) != 0:
		postfix.append(opstack.pop())

	return postfix


def compute_postfix(token_list):

	numstack = Stack()
	num1 = float(0)
	num2 = float(0)

	for i in range(len(token_list)):
		if token_list[i] not in ["+", "-", "*", "/", "^"]:
			numstack.push(float(token_list[i]))
		else:
			num1 = numstack.pop()
			num2 = numstack.pop()
			if token_list[i] == "+":
				numstack.push(num2 + num1)
			elif token_list[i] == "-":
				numstack.push(num2 - num1)
			elif token_list[i] == "*":
				numstack.push(num2 * num1)
			elif token_list[i] == "/":
				numstack.push(num2 / num1)
			else:
				numstack.push(num2 ** num1)

	return numstack.pop()

expr = input()
value = compute_postfix(infix_to_postfix(get_token_list(expr)))
print(value)